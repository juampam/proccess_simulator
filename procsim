#!/usr/bin/python3
import simpy
import random
import numpy as np
import time
import argparse

RANDOM_SEED = 42
random.seed(RANDOM_SEED)

class Proceso:
    def __init__(self, env, ram, cpu, id):
        self.env = env
        self.ram = ram
        self.cpu = cpu
        self.id = id

        self.instrucciones = random.randint(1, 10)
        self.memoria = random.randint(1, 10)

        self.start_time = -1
        self.end_time = -1

    def run(self):
        self.start_time = self.env.now
        print(f"Proccess {self.id} started on time {self.start_time}")

        yield self.ram.get(self.memoria)  
        with self.cpu.request() as req:
            yield req  
            yield self.env.timeout(random.uniform(1, 50))  # generar tiempo de ejecución aleatorio entre 1 - 50
        yield self.ram.put(self.memoria)

        self.end_time = self.env.now
        print(f"Proccess {self.id} ended en time {self.end_time}")

def simulacion(env, ram, cpu, num_procesos, intervalo_llegada, procesos):
    for i in range(num_procesos):
        proceso = Proceso(env, ram, cpu, i)
        procesos.append(proceso)  # Agregar proceso a la lista
        env.process(proceso.run())
        yield env.timeout(intervalo_llegada)


def ejecutar(num_procesos, intervalo_llegada, ram_size=100, cpu_count=1):
    env = simpy.Environment()
    ram = simpy.Container(env, init=ram_size, capacity=ram_size)
    cpu = simpy.Resource(env, capacity=cpu_count)

    procesos = []
    env.process(simulacion(env, ram, cpu, num_procesos, intervalo_llegada, procesos))
    env.run()

    tiempos = [p.end_time - p.start_time for p in procesos if hasattr(p, 'end_time') and hasattr(p, 'start_time')]
    
    if tiempos:
        return np.mean(tiempos), np.std(tiempos)
    else:
        return float('nan'), float('nan')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Procsim - Simulador de procesos')
    parser.add_argument('-p', '--proccess', type=int, default=25, help='Cantidad de procesos')
    parser.add_argument('-R', '--ram', type=int, default=100, help='Tamaño de la RAM')
    parser.add_argument('-i', '--interval', type=int, default=5, help='Intervalo de llegada')
    parser.add_argument('-C', '--cpu', type=int, default=1, help='Cantidad de CPUs')
    args = parser.parse_args()
    print("Procsim 1.1")

    promedio_tiempo, desviacion_estandar = ejecutar(args.proccess, args.interval, args.ram, args.cpu)
    print(f"For {args.proccess} processes with arrival interval {args.interval} and {args.cpu} CPU(s):")
    print(f"Average time {promedio_tiempo}, Standard Deviation: {desviacion_estandar}")
